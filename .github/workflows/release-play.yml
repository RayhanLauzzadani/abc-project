# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Android Release (staging → internal, main → production)

on:
  push:
    branches: [staging, main]
    tags: ["v*"]
  workflow_dispatch:
    inputs:
      notes:
        description: "Release notes (optional)"
        required: false
        default: ""
      lint_mode:
        description: "Analyzer gate for production (strict|fast|ignore)"
        type: choice
        options:
          - strict
          - fast
          - ignore
        default: ignore

jobs:
  # ========================
  # STAGING → INTERNAL
  # ========================
  release-internal:
    if: github.ref_name == 'staging'
    runs-on: ubuntu-latest

    env:
      PLAY_SERVICE_ACCOUNT_JSON_PATH: ${{ github.workspace }}/play-cred.json
      PLAY_TRACK: internal

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter 3.32.5
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.32.5"

      - name: Cache Pub
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/*.kts', 'gradle/wrapper/gradle-wrapper.properties') }}

      - name: Pub get
        run: flutter pub get

      - name: Decode keystore + Play creds + google-services.json
        shell: bash
        env:
          KS_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KS_PWD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KS_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KS_KEYPWD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          PLAY_JSON: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
          GSJ_B64: ${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}
        run: |
          mkdir -p android/app
          echo "$KS_B64" | base64 -d > android/app/upload-key.jks

          cat > android/key.properties <<EOF
          storeFile=app/upload-key.jks
          storePassword=$KS_PWD
          keyAlias=$KS_ALIAS
          keyPassword=$KS_KEYPWD
          EOF

          echo "$PLAY_JSON" > "$PLAY_SERVICE_ACCOUNT_JSON_PATH"

          if [ -n "$GSJ_B64" ]; then
            echo "$GSJ_B64" | base64 -d > android/app/google-services.json
          fi

      - name: Compute version
        id: ver
        shell: bash
        run: |
          REF_NAME="${GITHUB_REF_NAME}"
          if [[ "$REF_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VN="${REF_NAME#v}"
          else
            VN=$(grep -E '^version:' pubspec.yaml | sed -E 's/version:\s*([0-9.]+)\+.*/\1/' || echo "0.0.0")
          fi
          VC="${GITHUB_RUN_NUMBER}"
          echo "version_name=$VN" >> "$GITHUB_OUTPUT"
          echo "version_code=$VC" >> "$GITHUB_OUTPUT"
          echo "Using version: $VN+$VC"

      - name: Set version in pubspec.yaml
        shell: bash
        run: |
          python3 - << 'PY'
          import pathlib, re, os
          p = pathlib.Path('pubspec.yaml')
          s = p.read_text(encoding='utf-8')
          vn = os.environ['VN']; vc = os.environ['VC']
          s = re.sub(r'^version:\s*.*$', f'version: {vn}+{vc}', s, flags=re.M)
          p.write_text(s, encoding='utf-8')
          print("pubspec.yaml set to:", vn, "+", vc)
          PY
        env:
          VN: ${{ steps.ver.outputs.version_name }}
          VC: ${{ steps.ver.outputs.version_code }}

      - name: Dart fix & format (best-effort)
        run: |
          dart fix --apply || true
          dart format . || true

      - name: Analyze (non-fatal infos/warnings)
        run: |
          flutter analyze --no-fatal-infos --no-fatal-warnings

      - name: Build AAB (release)
        shell: bash
        run: |
          EXTRA=""
          # inject MAPS_API_KEY hanya kalau secret tersedia
          if [ -n "${{ secrets.MAPS_API_KEY }}" ]; then
            EXTRA="--dart-define=MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}"
          fi
          flutter build appbundle --release $EXTRA

      - name: Upload to Google Play (Internal)
        working-directory: android
        run: ./gradlew --no-daemon publishReleaseBundle

      - name: Upload artifact (AAB)
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: build/app/outputs/bundle/release/app-release.aab

  # ========================
  # MAIN/TAG → PRODUCTION (needs approval via Environment)
  # ========================
  release-production:
    if: github.ref_name == 'main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    environment:
      name: production

    env:
      PLAY_SERVICE_ACCOUNT_JSON_PATH: ${{ github.workspace }}/play-cred.json
      PLAY_TRACK: production
      LINT_MODE: ${{ inputs.lint_mode || 'ignore' }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Flutter 3.32.5
        uses: subosito/flutter-action@v2
        with:
          channel: stable
          flutter-version: "3.32.5"

      - name: Cache Pub
        uses: actions/cache@v4
        with:
          path: ~/.pub-cache
          key: pub-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/*.kts', 'gradle/wrapper/gradle-wrapper.properties') }}

      - name: Check required secrets (fail-fast)
        shell: bash
        env:
          KS_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KS_PWD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KS_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KS_KEYPWD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          PLAY_JSON: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
        run: |
          missing=0
          for v in KS_B64 KS_PWD KS_ALIAS KS_KEYPWD PLAY_JSON; do
            if [ -z "${!v}" ]; then echo "Missing secret: $v"; missing=1; fi
          done
          if [ $missing -eq 1 ]; then exit 1; fi

      - name: Pub get
        run: flutter pub get

      - name: Decode keystore + Play creds + google-services.json
        shell: bash
        env:
          KS_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          KS_PWD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KS_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KS_KEYPWD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          PLAY_JSON: ${{ secrets.PLAY_SERVICE_ACCOUNT_JSON }}
          GSJ_B64: ${{ secrets.ANDROID_GOOGLE_SERVICES_JSON }}
        run: |
          mkdir -p android/app
          echo "$KS_B64" | base64 -d > android/app/upload-key.jks

          cat > android/key.properties <<EOF
          storeFile=app/upload-key.jks
          storePassword=$KS_PWD
          keyAlias=$KS_ALIAS
          keyPassword=$KS_KEYPWD
          EOF

          echo "$PLAY_JSON" > "$PLAY_SERVICE_ACCOUNT_JSON_PATH"

          if [ -n "$GSJ_B64" ]; then
            echo "$GSJ_B64" | base64 -d > android/app/google-services.json
          fi

      - name: Compute version
        id: ver
        shell: bash
        run: |
          REF_NAME="${GITHUB_REF_NAME}"
          if [[ "$REF_NAME" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            VN="${REF_NAME#v}"
          else
            VN=$(grep -E '^version:' pubspec.yaml | sed -E 's/version:\s*([0-9.]+)\+.*/\1/' || echo "0.0.0")
          fi
          VC="${GITHUB_RUN_NUMBER}"
          echo "version_name=$VN" >> "$GITHUB_OUTPUT"
          echo "version_code=$VC" >> "$GITHUB_OUTPUT"
          echo "Using version: $VN+$VC"

      - name: Set version in pubspec.yaml
        shell: bash
        run: |
          python3 - << 'PY'
          import pathlib, re, os
          p = pathlib.Path('pubspec.yaml')
          s = p.read_text(encoding='utf-8')
          vn = os.environ['VN']; vc = os.environ['VC']
          s = re.sub(r'^version:\s*.*$', f'version: {vn}+{vc}', s, flags=re.M)
          p.write_text(s, encoding='utf-8')
          print("pubspec.yaml set to:", vn, "+", vc)
          PY
        env:
          VN: ${{ steps.ver.outputs.version_name }}
          VC: ${{ steps.ver.outputs.version_code }}

      - name: Dart fix & format (best-effort)
        run: |
          dart fix --apply || true
          dart format . || true

      # ========= Lint gates =========
      - name: Analyze (STRICT)
        if: env.LINT_MODE == 'strict'
        run: |
          flutter analyze
      - name: Analyze (FAST – warnings & infos non-fatal)
        if: env.LINT_MODE == 'fast' || env.LINT_MODE == 'ignore'
        run: |
          flutter analyze --no-fatal-warnings --no-fatal-infos

      # ========= Disable default template test & only run if other tests exist =========
      - name: Disable Flutter template widget_test (CI-only)
        shell: bash
        run: |
          if [ -f test/widget_test.dart ]; then
            echo "Renaming template test to avoid running it in CI"
            mv test/widget_test.dart test/widget_test.ci-skip.dart
          fi

      - name: Test (run only if there are tests)
        shell: bash
        run: |
          if [ -d test ] && [ -n "$(find test -name '*_test.dart' -print -quit)" ]; then
            echo "Running Flutter tests..."
            flutter test
          else
            echo "No tests found. Skipping 'flutter test'."
          fi

      - name: Build AAB (release)
        shell: bash
        run: |
          EXTRA=""
          if [ -n "${{ secrets.MAPS_API_KEY }}" ]; then
            EXTRA="--dart-define=MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}"
          fi
          flutter build appbundle --release $EXTRA

      - name: Upload to Google Play (Production)
        working-directory: android
        run: ./gradlew --no-daemon publishReleaseBundle

      - name: Upload artifact (AAB)
        uses: actions/upload-artifact@v4
        with:
          name: app-release.aab
          path: build/app/outputs/bundle/release/app-release.aab
